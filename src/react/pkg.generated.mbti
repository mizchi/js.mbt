// Generated using `moon info`, DON'T EDIT IT
package "mizchi/js/react"

import(
  "mizchi/js/dom"
  "mizchi/js/js"
)

// Values
fn[T] c(Component[T], T, children? : Array[&@js.ToJsValue], key? : String) -> VirtualElement

fn[T] component((T) -> VirtualElement) -> Component[T]

fn create_component_raw((@js.Value) -> VirtualElement) -> @js.Value

fn[T] create_context(T?) -> Context[T]

fn fragment(Array[&@js.ToJsValue], key? : String) -> VirtualElement

fn h(String, Map[String, @js.Value], Array[&@js.ToJsValue], ref_? : ReactRef[&@js.ToJsValue], key? : String) -> VirtualElement

fn props(id? : String, class? : String, style? : Map[String, String], on_click? : (@dom.MouseEvent) -> Unit, on_change? : (@dom.ChangeEvent) -> Unit, on_keydown? : (@dom.KeyboardEvent) -> Unit, on_keyup? : (@dom.KeyboardEvent) -> Unit) -> Map[String, @js.Value]

fn[T] provider(Context[T], T, Array[&@js.ToJsValue], key? : String) -> VirtualElement

fn render(VirtualElement, @dom.Element) -> Unit

fn suspense(Array[&@js.ToJsValue], fallback~ : VirtualElement) -> VirtualElement

fn[T] use_(@js.Promise[T]) -> T

fn[F] use_callback(F, Array[&@js.ToJsValue]) -> F

fn[T] use_context(Context[T]) -> T

fn use_effect(() -> () -> Unit, Array[@js.Value]) -> Unit

fn[T] use_memo(() -> T, Array[@js.Value]) -> T

fn[T, U] use_reducer((T, U) -> T, T) -> (T, (U) -> Unit)

fn[T] use_ref(T?) -> ReactRef[T]

fn[T : @js.ToJsValue] use_state(T) -> (T, (T) -> Unit)

// Errors

// Types and methods
pub type Component[T]

#external
pub type Context[T]

pub struct EmptyProps {
}
fn EmptyProps::equal(Self, Self) -> Bool // from trait `Eq`
fn EmptyProps::new() -> Self
#deprecated
fn EmptyProps::op_equal(Self, Self) -> Bool // from trait `Eq`
impl Eq for EmptyProps

#external
pub type ReactRef[T]
fn[T] ReactRef::current(Self[T]) -> T?
fn[T] ReactRef::set_current(Self[T], T) -> Unit

#external
pub type VirtualElement
fn VirtualElement::from_js_value(@js.Value) -> Self
fn VirtualElement::to_js(Self) -> @js.Value // from trait `@js.ToJsValue`
impl @js.ToJsValue for VirtualElement

// Type aliases

// Traits

