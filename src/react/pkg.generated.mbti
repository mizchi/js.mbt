// Generated using `moon info`, DON'T EDIT IT
package "mizchi/js/react"

import(
  "mizchi/js/dom"
  "mizchi/js/js"
)

// Values
fn[T] c((T) -> Element, T, children? : Array[&Js], key? : String) -> Element

fn[T] create_context(T?) -> Context[T]

fn create_element(String, Array[&Js], disabled? : Bool, attributes? : Map[String, Val], id? : String, class? : String, className? : String, style? : Map[String, String], ref_? : ReactRef[@dom.Element], key? : String, on_click? : (@dom.MouseEvent) -> Unit, on_change? : (@dom.ChangeEvent) -> Unit, on_keydown? : (@dom.KeyboardEvent) -> Unit, on_keyup? : (@dom.KeyboardEvent) -> Unit) -> Element

fn fragment(Array[&Js], key? : String) -> Element

fn h(String, Array[&Js], disabled? : Bool, attributes? : Map[String, Val], id? : String, class? : String, className? : String, style? : Map[String, String], ref_? : ReactRef[@dom.Element], key? : String, on_click? : (@dom.MouseEvent) -> Unit, on_change? : (@dom.ChangeEvent) -> Unit, on_keydown? : (@dom.KeyboardEvent) -> Unit, on_keyup? : (@dom.KeyboardEvent) -> Unit) -> Element

async fn init_react_client() -> ReactDOMClient

fn[T] lazy_(async () -> ((T) -> Element)) -> (EmptyProps) -> @js.Promise[Val]

fn[T] provider(Context[T], Array[&Js], value~ : T) -> Element

fn start_transition(() -> Unit) -> Unit

fn suspense(Array[&Js], fallback~ : Element) -> Element

fn[T] use_(@js.Promise[T]) -> T

fn[T, U] use_action_state(async (T, U) -> T noraise, T) -> (T, (U) -> Unit, Bool)

fn[F] use_callback(F, Array[&Js]) -> F

fn[T] use_context(Context[T]) -> T

fn use_effect(() -> () -> Unit, Array[&Js]) -> Unit

fn use_layout_effect(() -> () -> Unit, Array[&Js]) -> Unit

fn[T] use_memo(() -> T, Array[Val]) -> T

fn[T, U] use_reducer((T, U) -> T, T) -> (T, (U) -> Unit)

fn[T] use_ref(T?) -> ReactRef[T]

fn[T : Js] use_state(T) -> (T, (T) -> Unit)

fn[T] use_state_lazy(() -> T) -> (T, (T) -> Unit)

// Errors

// Types and methods
#external
pub type Component[T]

#external
pub type Context[T]

#external
pub type Element
fn Element::to_js(Self) -> Val // from trait `Js`
impl Js for Element

pub(all) struct EmptyProps {
}
fn EmptyProps::default() -> Self // from trait `Default`
impl Default for EmptyProps

#external
pub type ReactDOMClient
fn ReactDOMClient::create_root(Self, @dom.Element) -> ReactDOMRoot

#external
pub type ReactDOMRoot
fn ReactDOMRoot::render(Self, Element) -> Unit

#external
pub type ReactRef[T]
fn[T] ReactRef::current(Self[T]) -> T?
fn[T] ReactRef::set_current(Self[T], T) -> Unit
fn[T] ReactRef::to_js(Self[T]) -> Val // from trait `Js`
impl[T] Js for ReactRef[T]

// Type aliases

// Traits

